1. Sum of euler totient function of all the the positive divisors of a number is equal to the number

2. Euler totient function of some number 2^k = 2^k - 2^(k-1)
   Euler totient function of prime^k = p^k - p^(k-1)
   
   
3. Number of subarray with exactly K distinct integers = number of subarrays with at most K distinct integers - number of  subarrays with at most K-1 distinct integers.

4. Iterate over submask of a mask (ie, 5->101 so its submasks are 101, 100, 101) :
   int mask; cin >> mask;
   for(int submask = mask; submask; submask = (submask-1)&mask) cout<<submask<<'\n';
   
5. for(mask) {
    for(all submasks of mask) {
     O(1) work;
    }
   }
   Time complexity -> 3^n (mask -> [0, 2^n-1]); 
   
   
6. If we given queries of LCA on unrooted tree, ie, r u v means we are to tell LCA of u, v when root is r, then how to do?
   Root the tree at any node n and run LCA dfs, then,
   find l1 = LCA(n, r, u);
   find l2 = LCA(n, r, v);
   find l3 = LCA(n, u, v);
   and take the odd number out, ie, if two are equal and one is different, then take the different one, if all are equal, then
   take that only.
   
   
 7. For the derrangement theorem
 	dp[i] = (i-1)*(d[i-1] + d[i-2])
 
 
 8. Manhattan distance between two cartesian points
 	dist((x1, y1), (x2, y2)) = max(abs(x1 + y1 - (x2 + y2)), abs(x1 - y1 - (x2 - y2)));


 9. Let sum of divisors of a number n = d(n);
 Then d(a . b) = d(a) * d(b) if __gcd(a, b) == 1;
 
 
 10. a(n) = (n! * n * (n - 1))/4 gives the total number of inversions in all the permutations 
     of a number n
     
 11. For any event if we have 2 outcomes, success with probability p and failure with prob 1 - p;
     Then find expected number of trails to get a success.
     Answer = 1 / p;
     
 12. When we throw a dice, find expected number of throws so that all numbers appear atleast once
     Let x1 = throws to get 1 distinct
     Let x2 = throws to get 2nd distinct after getting 1 distinct, and so on.
     
     Then clearly x1 = 1;
     x2 = (success -> (n - 1) / n, failure -> 1 / n);
     x3 = (success -> (n - 2) / n, failure -> 2 / n);
     	
     Expected number of throws = x1 + x2 + x3 + ....
     				= 1 + n/(n-1) + n/(n-2) + .....
     				
13. summation(N / i) (i = 1 to N) -> O(NlogN)
    summation(N / i) (i = primes from 2 to N) -> O(NloglogN)
    
14.
    Find using matrix exponentiation, for a matrix A, 
    A + A^2 + A^3 + ...... + A^n (n -> 10^9);

    We have,

    A + A^2 = A(I + A)
    A + A^2 + A^3 = A(I + A) + A^3
    A + A^2 + A^3 + A^4 = (A + A^2)(I + A^2)
                    = A(I + A)(I + A^2)
    Let

    B(n) = A + ... + A^n
    We have:

    B(1) = A
    B(n) = B(n / 2) * (I + A^(n / 2)) if n is even
    B(n) = B(n / 2) * (I + A^(n / 2)) + A^n if n is odd
     				

15.
   Product of divisors when list of primes and their respective powers are given

   Let the product and number of divisors when only considering the first $i$ prime
   factors be $P_i$ and $C_i$ respectively. The answer will be $P_N$.

   $$\begin{aligned} P_i &= P_{i - 1}^{k_i + 1} \left(x_i^{k_i(k_i + 1)/2} \right)^{C_{i - 1}} \end{aligned}$$

   Again, we can calculate each $P_i$ using fast exponentiation in
   $\mathcal O(N \log(\max(k_i)))$ time, but there's a catch! It might be tempting
   to use $C_{i - 1}$ from your previously-calculated values in part 1 of this
   problem, but those values will yield wrong answers.

   This is because $a^b \not \equiv a^{b \bmod p} \pmod{p}$ in general. However, by
   Fermat's little theorem, $a^b \equiv a^{b \bmod (p - 1)} \pmod{p}$ for prime
   $p$, so we can just store $C_i$ modulo $10^9 + 6$ to calculate $P_i$.
   
   SEE CSES DIVISOR ANALYSIS
   Solution -> https://usaco.guide/problems/cses-2182-divisor-analysis/solution
   
16. (CSES counting necklaces) Your task is to count the number of different necklaces that consist of n pearls and each pearl has m possible colors.

Two necklaces are considered to be different if it is not possible to rotate one of them so that they look the same.

Formula is ->
 (summation(0, n - 1) m^gcd(i, n)) / n

17. Count number of distinct palindromic subsequences of a string
    Leetcode 730
    
    Imp link : https://csacademy.com/contest/round-57/task/distinct-palindromes/solution/


18. IMPORTANT
See this question -> https://leetcode.com/problems/maximum-of-absolute-value-expression/

Useful links -> https://en.wikipedia.org/wiki/Chebyshev_distance

Best post -> https://leetcode.com/problems/maximum-of-absolute-value-expression/discuss/347046/Python-ManhattanChebyshev-Distance

Similar question -> Find max manhattan distance between two points from a given set of points ->
https://www.geeksforgeeks.org/maximum-manhattan-distance-between-a-distinct-pair-from-n-coordinates/#:~:text=The%20Manhattan%20Distance%20between%20two,%2B%20%7CY1%20%E2%80%93%20Y2%7C.

Chebyshev dist between (x1,y1) and (x2,y2) = max(|x1-x2|, |y1-y2|)

Manhattan((x1, y1), (x2, y2))
    = |x1 - x2| + |y1 - y2|
    = max(
        |(x1 - x2) + (y1 - y2)|,
        |(x1 - x2) - (y1 - y2)|
    )
    = max(
        |(x1 + y1) - (x2 + y2)|,
        |(x1 - y1) - (x2 - y2)|
    )
    
    = Chebyshev((x1+y1, x1-y1), (x2+y2, x2-y2))
   
   
   
   In 3D, we replace each point, (x, y, z), with (x+y+z, x+y-z, x-y+z, x-y-z):

|x1 - x2| + |y1 - y2| + |z1 - z2| 
    = max(
        |(x1 - x2) + (y1 - y2) + (z1 - z2)|,
	    |(x1 - x2) + (y1 - y2) - (z1 - z2)|,
	    |(x1 - x2) - (y1 - y2) + (z1 - z2)|,
	    |(x1 - x2) - (y1 - y2) - (z1 - z2)|
    )
    = max(
        |(x1 + y1 + z1) - (x2 + y2 + z2)|,
	    |(x1 + y1 - z1) - (x2 + y2 - z2)|,
	    |(x1 - y1 + z1) - (x2 - y2 + z2)|,
	    |(x1 - y1 - z1) - (x2 - y2 - z2)|
    )
    
    
19. If m is a prime number we can speed up a bit this algorithm by calculating x^(n mod(m−1)) instead of x^n
     
20. Eulcidean algorithm for finding gcd:
The running time of the algorithm is estimated by Lamé's theorem, which establishes a surprising connection between the Euclidean algorithm and the Fibonacci sequence:

If a>b≥1 and b<Fn for some n, the Euclidean algorithm performs at most n−2 recursive calls.

Moreover, it is possible to show that the upper bound of this theorem is optimal. When a=Fn and b=Fn−1, gcd(a,b) will perform exactly n−2 recursive calls. In other words, consecutive Fibonacci numbers are the worst case input for Euclid's algorithm.

Given that Fibonacci numbers grow exponentially, we get that the Euclidean algorithm works in O(logmin(a,b)).


